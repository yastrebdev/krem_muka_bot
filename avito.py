import asyncio
from playwright.async_api import async_playwright, TimeoutError

from bot import send_to_telegram

AVITO_LOGIN_URL = "https://www.avito.ru/profile/login"
AVITO_MESSENGER_URL = "https://www.avito.ru/profile/messenger"
LOGIN = "79538055851"
PASSWORD = "strbvMv_25"

avito_page = None
avito_ready = asyncio.Event()

async def fill_input_safe(page, selector, value, label=""):
    try:
        print(f"üîç –ñ–¥—ë–º –ø–æ–ª–µ: {label or selector}")
        await page.wait_for_selector(selector, timeout=15000, state='visible')
        await page.fill(selector, value)
        print(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ: {label or selector}")
        return True
    except TimeoutError:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ {label or selector}")
        return False


async def login_and_monitor():
    global avito_page
    print(1, avito_page)

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False, slow_mo=50)
        context = await browser.new_context()
        page = await context.new_page()
        avito_page = page

        print("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        try:
            await page.goto(
                AVITO_MESSENGER_URL,
                timeout=60000,  # 60 —Å–µ–∫—É–Ω–¥
                wait_until="domcontentloaded"  # –Ω–µ –∂–¥–µ–º –≤—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ä–µ–∫–ª–∞–º—ã
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ {AVITO_MESSENGER_URL}: {e}")
            return  # –∏–ª–∏ restart / notify / pass

        # –ï—Å–ª–∏ —É–∂–µ –≤–æ—à–ª–∏ ‚Äî —Å—Ä–∞–∑—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
        if "profile" in page.url and "login" not in page.url:
            print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            await page.goto(AVITO_MESSENGER_URL)
        else:
            # –ò–Ω–æ–≥–¥–∞ –ø–æ–ª—è –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ iframe ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –≤—Å—è–∫–∏–π
            await page.wait_for_load_state("domcontentloaded")
            print("üîê –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            login_filled = await fill_input_safe(page, 'input[type="tel"], input[type="text"]', LOGIN, "–õ–æ–≥–∏–Ω")
            if login_filled:
                await page.click('button[type="submit"]')

                password_filled = await fill_input_safe(page, 'input[type="password"]', PASSWORD, "–ü–∞—Ä–æ–ª—å")
                if password_filled:
                    await page.click('button[type="submit"]')

                    # –ñ–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
                    print("‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥/—Ä–µ–¥–∏—Ä–µ–∫—Ç...")
                    for _ in range(30):  # –¥–æ 30 —Å–µ–∫
                        if page.url.startswith("https://www.avito.ru/profile"):
                            break
                        await page.wait_for_timeout(1000)

                    if not page.url.startswith("https://www.avito.ru/profile"):
                        print("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –≤–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É –∏–ª–∏ –∫–æ–¥ –∏–∑ –°–ú–°.")
                        while not page.url.startswith("https://www.avito.ru/profile"):
                            await asyncio.sleep(2)
                            print("üïµÔ∏è –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥...")

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è –≤—Ö–æ–¥–∞. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è.")

        print("üì® –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä...")
        await page.goto(AVITO_MESSENGER_URL)
        try:
            await page.wait_for_selector('[data-marker="channels/channelLink"]', timeout=20000)
        except TimeoutError:
            print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        messages = await page.query_selector_all('[data-marker="channels/channelLink"]')
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        for i, msg in enumerate(messages[:5]):
            content = await msg.inner_text()
            print(f"‚úâÔ∏è [{i+1}] {content[:100]}...")

        print("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n")
        last_messages = set()

        while True:
            await page.wait_for_timeout(10000)

            messages = await page.query_selector_all('[data-marker="channels/channelLink"]')
            current_texts = set()

            for msg in messages[:10]:
                text = (await msg.inner_text()).strip()
                href = await msg.get_attribute("href")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
                message_id = href or "[no_id]"

                current_texts.add(text)

                if text not in last_messages:
                    full_text = f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ê–≤–∏—Ç–æ</b>\n\n{message_id}\n\n{text}"
                    print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:\n{full_text}\n{'-'*40}")
                    await send_to_telegram(full_text, href)

            last_messages = current_texts
avito_ready.set()


async def send_avito_reply(chat_url, reply_text):
    await avito_ready.wait()
    print(2, avito_page)
    if avito_page is None:
        print("‚ö†Ô∏è avito_page –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    await avito_page.goto(chat_url, wait_until="domcontentloaded")
    await avito_page.wait_for_selector('[data-marker="reply/input"]', timeout=10000)

    input_box = await avito_page.query_selector('[data-marker="reply/input"]')
    await input_box.fill(reply_text)
    await input_box.press("Enter")


if __name__ == "__main__":
    asyncio.run(login_and_monitor())
